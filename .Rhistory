TLdata <- read.csv("//n05-corea-cifs.umhs.med.umich.edu/Home1/Users/xtyang/My Documents/TL_revision/TLdata.csv")
View(TLdata)
# Figure 2------------------------------------
# TL by Race
TL_race=TLdata
TL_race$race=c()
for(i in 1:nrow(TL_race)){
if(TL_race$AfricanAmerican[i] == "Yes"){
TL_race$race[i] = "AfricanAmerican"
}else if(TL_race$Caucasian[i] == "Yes"){
TL_race$race[i] = "Caucasian"
}else if (TL_race$Latin[i] == "Yes"){
TL_race$race[i] = "Latino"
}else if(TL_race$PacificIsland[i] == "Yes"){
TL_race$race[i] = "PacificIslander"
}else{
TL_race$race[i] = "Asian"
}
}
ag2 <- aggregate(. ~ race,TL_race, function(x) c(mean = mean(x), sd = sd(x)))
warning()
warnings()
stat_by_race <- do.call("data.frame", ag2)
stat_by_race
TL_race_num = TL_race%>%select(MothersAge, Gest_Age, Weight_Gain, Mothers.Height, BMI)
library(dplyr)
TL_race_num = TL_race%>%select(MothersAge, Gest_Age, Weight_Gain, Mothers.Height, BMI)
ag2 <- aggregate(. ~ race,TL_race, function(x) c(mean = mean(x), sd = sd(x)))
ag2 <- aggregate(. ~ race,TL_race_num, function(x) c(mean = mean(x), sd = sd(x)))
TL_race_num = TL_race%>%select(MothersAge, Gest_Age, Weight_Gain, Mothers.Height, BMI, race)
stat_by_race <- do.call("data.frame", ag2)
ag2 <- aggregate(. ~ race,TL_race_num, function(x) c(mean = mean(x), sd = sd(x)))
stat_by_race <- do.call("data.frame", ag2)
stat_by_race
pvalue = c()
for(i in TL_race_num){
tmodel = t.test(TL_race_num[,i]~TL_race_num$race)
pvalue = c(pvalue, tmodel$p.value)
}
pvalue = c()
for(i in TL_race_num-1){
tmodel = t.test(TL_race_num[,i]~TL_race_num$race)
pvalue = c(pvalue, tmodel$p.value)
}
pvalue
library(readxl)
LanaGarmireClinicalSamples_Final_20181101 <- read_excel("//n05-corea-cifs.umhs.med.umich.edu/Home1/Users/xtyang/My Documents/TL_revision/LanaGarmireClinicalSamples_Final_20181101.xlsx",
skip = 1)
View(LanaGarmireClinicalSamples_Final_20181101)
colnames(LanaGarmireClinicalSamples_Final_20181101)
?sort
?order
?arrange
library(shiny); runApp('GitHub/PE_delivery_pred/Rshiny1219/shiny1219.R')
runApp('GitHub/PE_delivery_pred/Rshiny1219/shiny1219.R')
runApp('GitHub/PE_delivery_pred/Rshiny1219/shiny1219.R')
runApp('GitHub/PE_delivery_pred/Rshiny1219/shiny1219.R')
runApp('GitHub/PE_delivery_pred/Rshiny1219/shiny1219.R')
runApp('GitHub/PE_delivery_pred/Rshiny1219/shiny1219.R')
?Cindex
runApp('GitHub/PE_delivery_pred/Rshiny1219/shiny1219.R')
folder = "base"
setwd("~/GitHub/PE_delivery_pred/Rshiny1219")
W = read.csv(paste0("data/",folder, "/Wr.csv"), header = F)
b = read.csv(paste0("data/",folder, "/br.csv"), header = F)
test = read.csv(paste0("data/",folder, "/hold_out_x.csv"), header = T)
train = read.csv(paste0("data/",folder, "/cv_x.csv"), header = T)
time_test = read.csv(paste0("data/",folder, "/hold_out_y.csv"))
sta_test = read.csv(paste0("data/",folder, "/hold_out_y_status.csv"),header=T)
time_train = read.csv(paste0("data/",folder, "/cv_y.csv"),header=T)
sta_train = read.csv(paste0("data/",folder, "/cv_y_status.csv"), header=T)
test = dat[[3]]
time_test = dat[[5]]
sta_test = dat[[6]]
dat = list(W, b, test, train, time_test, sta_test, time_train, sta_train)
theta = calculate_theta(dat[[1]], dat[[2]], test, time_test, sta_test,dat[[4]], dat[[7]], dat[[8]])
result = list(theta[[1]], theta[[2]], time_test, sta_test)
predTest = result[[2]]
time_test = result[[3]]
sta_test = result[[4]]
ytest = data.frame(time = time_test, status = sta_test)
colnames(ytest)[1] = "time"
cindex = round(Cindex(as.matrix(predTest),ytest),3)
?Cindex
runApp('shiny1219.R')
runApp('shiny1219.R')
runApp('shiny1219.R')
setwd("~/GitHub/PE_delivery_pred/Rshiny1219/data/base")
library(glmnet)
library(survival)
library(ggplot2)
W = read.csv("Wr.csv",header =F)
b= read.csv("br.csv",header= F)
W = t(W)
b = t(b)
test = read.csv("hold_out_x.csv", header = T)
theta = read.csv("SRTR_theta_hcc_new_holdout.csv" , header = F)
train = read.csv("cv_x.csv", header = T)
n_test = nrow(test)
n_train = nrow(train)
n_node = nrow(W)
selu = function(x){
alpha=1.67326324
scale=1.05070098
if(x>=0){
return(scale * x)
}else{
return(scale * alpha * (exp(x) - 1))
}
}
image_hidden_test = matrix(rep(0,n_node*n_test),nrow = n_test) # 58 is the sample size ; 50 is sqrt(number of features)
for (i in 1:n_test){
for (j in 1:n_node){
image_hidden_test[i,j] = selu(sum(test[i,]*W[j,])+b[j])
}
}
image_hidden_train = matrix(rep(0,n_node*n_train),nrow = n_train)
for (i in 1:n_train){
for (j in 1:n_node){
image_hidden_train[i,j] = selu(sum(train[i,]*W[j,])+b[j])
}
}
time_test = read.csv("hold_out_y.csv",header=T)
sta_test = read.csv("hold_out_y_status.csv",header=T)
Ymatrix_test = Surv(time_test[,1],sta_test[,1])
time_train = read.csv("cv_y.csv",header=T)
sta_train = read.csv("cv_y_status.csv", header=T)
Ymatrix_train = Surv(time_train[,1],sta_train[,1])
cv.tr=cv.glmnet(as.matrix(image_hidden_train),Ymatrix_train,family='cox',alpha=0.9,nfolds=10)
save(cv.tr, file = "cvmodel.RData")
load("cvmodel.RData")
W = read.csv("Wr.csv",header =F)
b= read.csv("br.csv",header= F)
W = t(W)
b = t(b)
test = read.csv("hold_out_x.csv", header = T)
n_test = nrow(test)
n_train = nrow(train)
n_node = nrow(W)
selu = function(x){
alpha=1.67326324
scale=1.05070098
if(x>=0){
return(scale * x)
}else{
return(scale * alpha * (exp(x) - 1))
}
}
image_hidden_test = matrix(rep(0,n_node*n_test),nrow = n_test) # 58 is the sample size ; 50 is sqrt(number of features)
for (i in 1:n_test){
for (j in 1:n_node){
image_hidden_test[i,j] = selu(sum(test[i,]*W[j,])+b[j])
}
}
predTest<-predict(cv.tr,as.matrix(image_hidden_test),s=cv.tr$lambda.min,type='response')
survConcordance(Ymatrix_test ~ predTest)$concordance
time_test = read.csv("hold_out_y.csv",header=T)
sta_test = read.csv("hold_out_y_status.csv",header=T)
Ymatrix_test = Surv(time_test[,1],sta_test[,1])
survConcordance(Ymatrix_test ~ predTest)$concordance
setwd("~/GitHub/PE_delivery_pred/Rshiny1219/data/eope_base")
library(glmnet)
library(survival)
library(ggplot2)
W = read.csv("Wr.csv",header =F)
b= read.csv("br.csv",header= F)
W = t(W)
b = t(b)
test = read.csv("hold_out_x.csv", header = T)
theta = read.csv("SRTR_theta_hcc_new_holdout.csv" , header = F)
train = read.csv("cv_x.csv", header = T)
# test= scale(test)
# test[is.na(test)] = 0
#
# train =scale(train)
# train[is.na(train)] = 0
n_test = nrow(test)
n_train = nrow(train)
n_node = nrow(W)
selu = function(x){
alpha=1.67326324
scale=1.05070098
if(x>=0){
return(scale * x)
}else{
return(scale * alpha * (exp(x) - 1))
}
}
image_hidden_test = matrix(rep(0,n_node*n_test),nrow = n_test) # 58 is the sample size ; 50 is sqrt(number of features)
for (i in 1:n_test){
for (j in 1:n_node){
image_hidden_test[i,j] = selu(sum(test[i,]*W[j,])+b[j])
}
}
image_hidden_train = matrix(rep(0,n_node*n_train),nrow = n_train)
for (i in 1:n_train){
for (j in 1:n_node){
image_hidden_train[i,j] = selu(sum(train[i,]*W[j,])+b[j])
}
}
time_test = read.csv("hold_out_y.csv",header=T)
sta_test = read.csv("hold_out_y_status.csv",header=T)
Ymatrix_test = Surv(time_test[,1],sta_test[,1])
time_train = read.csv("cv_y.csv",header=T)
sta_train = read.csv("cv_y_status.csv", header=T)
Ymatrix_train = Surv(time_train[,1],sta_train[,1])
cv.tr=cv.glmnet(as.matrix(image_hidden_train),Ymatrix_train,family='cox',alpha=0.9,nfolds=10)
save(cv.tr, file = "cvmodel.RData")
setwd("~/GitHub/PE_delivery_pred/Rshiny1219/data/eope_full")
library(glmnet)
library(survival)
library(ggplot2)
W = read.csv("Wr.csv",header =F)
b= read.csv("br.csv",header= F)
W = t(W)
b = t(b)
test = read.csv("hold_out_x.csv", header = T)
theta = read.csv("SRTR_theta_hcc_new_holdout.csv" , header = F)
train = read.csv("cv_x.csv", header = T)
# test= scale(test)
# test[is.na(test)] = 0
#
# train =scale(train)
# train[is.na(train)] = 0
n_test = nrow(test)
n_train = nrow(train)
n_node = nrow(W)
selu = function(x){
alpha=1.67326324
scale=1.05070098
if(x>=0){
return(scale * x)
}else{
return(scale * alpha * (exp(x) - 1))
}
}
image_hidden_test = matrix(rep(0,n_node*n_test),nrow = n_test) # 58 is the sample size ; 50 is sqrt(number of features)
for (i in 1:n_test){
for (j in 1:n_node){
image_hidden_test[i,j] = selu(sum(test[i,]*W[j,])+b[j])
}
}
image_hidden_train = matrix(rep(0,n_node*n_train),nrow = n_train)
for (i in 1:n_train){
for (j in 1:n_node){
image_hidden_train[i,j] = selu(sum(train[i,]*W[j,])+b[j])
}
}
time_test = read.csv("hold_out_y.csv",header=T)
sta_test = read.csv("hold_out_y_status.csv",header=T)
Ymatrix_test = Surv(time_test[,1],sta_test[,1])
time_train = read.csv("cv_y.csv",header=T)
sta_train = read.csv("cv_y_status.csv", header=T)
Ymatrix_train = Surv(time_train[,1],sta_train[,1])
cv.tr=cv.glmnet(as.matrix(image_hidden_train),Ymatrix_train,family='cox',alpha=0.9,nfolds=10)
save(cv.tr, file = "cvmodel.RData")
setwd("~/GitHub/PE_delivery_pred/Rshiny1219/data/full")
library(glmnet)
library(survival)
library(ggplot2)
W = read.csv("Wr.csv",header =F)
b= read.csv("br.csv",header= F)
W = t(W)
b = t(b)
test = read.csv("hold_out_x.csv", header = T)
theta = read.csv("SRTR_theta_hcc_new_holdout.csv" , header = F)
train = read.csv("cv_x.csv", header = T)
# test= scale(test)
# test[is.na(test)] = 0
#
# train =scale(train)
# train[is.na(train)] = 0
n_test = nrow(test)
n_train = nrow(train)
n_node = nrow(W)
selu = function(x){
alpha=1.67326324
scale=1.05070098
if(x>=0){
return(scale * x)
}else{
return(scale * alpha * (exp(x) - 1))
}
}
image_hidden_test = matrix(rep(0,n_node*n_test),nrow = n_test) # 58 is the sample size ; 50 is sqrt(number of features)
for (i in 1:n_test){
for (j in 1:n_node){
image_hidden_test[i,j] = selu(sum(test[i,]*W[j,])+b[j])
}
}
image_hidden_train = matrix(rep(0,n_node*n_train),nrow = n_train)
for (i in 1:n_train){
for (j in 1:n_node){
image_hidden_train[i,j] = selu(sum(train[i,]*W[j,])+b[j])
}
}
time_test = read.csv("hold_out_y.csv",header=T)
sta_test = read.csv("hold_out_y_status.csv",header=T)
Ymatrix_test = Surv(time_test[,1],sta_test[,1])
time_train = read.csv("cv_y.csv",header=T)
sta_train = read.csv("cv_y_status.csv", header=T)
Ymatrix_train = Surv(time_train[,1],sta_train[,1])
cv.tr=cv.glmnet(as.matrix(image_hidden_train),Ymatrix_train,family='cox',alpha=0.9,nfolds=10)
save(cv.tr, file = "cvmodel.RData")
runApp('~/GitHub/PE_delivery_pred/Rshiny1219/shiny1219.R')
setwd("~/GitHub/PE_delivery_pred/Rshiny1219")
runApp('shiny1219.R')
runApp('shiny1219.R')
runApp('shiny1219.R')
runApp('shiny1219.R')
runApp('shiny1219.R')
print(dim(time_train), dim(sta_train))
runApp('shiny1219.R')
runApp('shiny1219.R')
folder = "base"
W = read.csv(paste0("data/",folder, "/Wr.csv"), header = F)
b = read.csv(paste0("data/",folder, "/br.csv"), header = F)
test = read.csv(paste0("data/",folder, "/hold_out_x.csv"), header = T)
train = read.csv(paste0("data/",folder, "/cv_x.csv"), header = T)
time_test = read.csv(paste0("data/",folder, "/hold_out_y.csv"))
sta_test = read.csv(paste0("data/",folder, "/hold_out_y_status.csv"),header=T)
time_train = read.csv(paste0("data/",folder, "/cv_y.csv"),header=T)
sta_train = read.csv(paste0("data/",folder, "/cv_y_status.csv"), header=T)
dim(time_test)
list(list(W, b, test, train, time_test, sta_test, time_train, sta_train))
dat = list(W, b, test, train, time_test, sta_test, time_train, sta_train)
test = dat[[3]][1, ]
time_test = dat[[5]][1,]
sta_test = dat[[6]][1,]
runApp('shiny1219.R')
runApp('shiny1219.R')
runApp('shiny1219.R')
runApp('shiny1219.R')
runApp('shiny1219.R')
runApp('shiny1219.R')
runApp('shiny1219.R')
